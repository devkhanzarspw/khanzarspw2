/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package khanzahmsservicemobilejkn;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import fungsi.ApiMobileJKN;
import fungsi.koneksiDB;
import fungsi.sekuel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Calendar;
import java.util.Date;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.Timer;
import org.apache.commons.lang.StringUtils;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;

/**
 *
 * @author IT 2
 */
public class frmUtama3 extends javax.swing.JFrame {

    private Connection koneksi = koneksiDB.condb();
    private sekuel Sequel = new sekuel();
    private String requestJson, URL = "", utc = "", link = "", datajam = "",
            nol_jam = "", nol_menit = "", nol_detik = "", jam = "", menit = "", detik = "", hari = "", noresep = "", jensiracikan = "",
            kodepoli = "", kodedokter = "", kodebpjs = Sequel.cariIsi("select password_asuransi.kd_pj from password_asuransi");
    private ApiMobileJKN api = new ApiMobileJKN();
    private HttpHeaders headers;
    private HttpEntity requestEntity;
    private ObjectMapper mapper = new ObjectMapper();
    private JsonNode root;
    private JsonNode nameNode;
    private PreparedStatement ps, ps2;
    private ResultSet rs, rs2;
    private Calendar cal = Calendar.getInstance();
    private int day = cal.get(Calendar.DAY_OF_WEEK);
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private SimpleDateFormat tanggalFormat = new SimpleDateFormat("yyyy-MM-dd");
    private Date parsedDate;
    private Date date = new Date();
    private String header1 = "", payload = "", base64UrlHeader = "", base64UrlPayload = "",
            base64UrlSignature = "", signature = "", tokensikesta = "";

    /**
     * Creates new form frmUtama3
     */
    public frmUtama3() {
        initComponents();

        date = new Date();
        //jLabel4.setText(tanggalFormat.format(date));
        jam();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TeksArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Service Satu Data Dinkes Tulungagung");

        TeksArea.setColumns(20);
        TeksArea.setRows(5);
        jScrollPane1.setViewportView(TeksArea);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Kunjungan Rawat Jalan RS. Putra Waspada Tulungagung");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 2, 11)); // NOI18N
        jLabel4.setText("0000-00-00 00:00:00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(0, 142, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmUtama3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmUtama3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmUtama3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmUtama3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUtama3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea TeksArea;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private void jam() {
        ActionListener taskPerformer = new ActionListener() {
            private int nilai_jam;
            private int nilai_menit;
            private int nilai_detik;
                  

            public void actionPerformed(ActionEvent e) {
                nol_jam = "";
                nol_menit = "";
                nol_detik = "";
                Date now = Calendar.getInstance().getTime();
                nilai_jam = now.getHours();
                nilai_menit = now.getMinutes();
                nilai_detik = now.getSeconds();
                
               
                // Jika nilai JAM lebih kecil dari 10 (hanya 1 digit)
                if (nilai_jam <= 9) {
                    // Tambahkan "0" didepannya
                    nol_jam = "0";
                }
                // Jika nilai MENIT lebih kecil dari 10 (hanya 1 digit)
                if (nilai_menit <= 9) {
                    // Tambahkan "0" didepannya
                    nol_menit = "0";
                }
                // Jika nilai DETIK lebih kecil dari 10 (hanya 1 digit)
                if (nilai_detik <= 9) {
                    // Tambahkan "0" didepannya
                    nol_detik = "0";
                }
                // Membuat String JAM, MENIT, DETIK
                jam = nol_jam + Integer.toString(nilai_jam);
                menit = nol_menit + Integer.toString(nilai_menit);
                detik = nol_detik + Integer.toString(nilai_detik);
                
                //setiap detik                           
                jLabel4.setText(tanggalFormat.format(date) + " " + jam + ":" + menit + ":" + detik + "\n");
                //setiap menit
                if (detik.equals("01")) {
                    date = new Date();                    
                    TeksArea.append(tanggalFormat.format(date) + " " + jam + ":" + menit + ":" + detik + "\n");
                }                
                //setiap jam 00:01:01 dini hari
                if (jam.equals("00") && menit.equals("01") && detik.equals("01")) {
                //if (detik.equals("01")) {
                     TeksArea.append("Mulai Kirim Data "+tanggalFormat.format(date)+"\n");
                     pencet();
                     TeksArea.append("Selesai Kirim Data "+tanggalFormat.format(date)+"\n");
                 }
                //setiap jam 12 siang
                if (jam.equals("12") && menit.equals("44") && detik.equals("01")) {
                //if (detik.equals("01")) {
                     TeksArea.append("Mulai Kirim Data "+tanggalFormat.format(date)+"\n");
                     pencet();
                     TeksArea.append("Selesai Kirim Data "+tanggalFormat.format(date)+"\n");
                 }
            }
        };

        // Timer
        new Timer(1000, taskPerformer).start();
    }

    static String generateSignature(String ax1, String ax2) {
        String encoded = "";
        String type = "HmacSHA256";
        try {
            byte[] key = ("ab123").getBytes("UTF-8");
            byte[] Sequence = (ax1 + "." + ax2).getBytes("UTF-8");

            Mac HMAC = Mac.getInstance(type);
            SecretKeySpec secretKey = new SecretKeySpec(key, type);

            HMAC.init(secretKey);
            byte[] Hash = HMAC.doFinal(Sequence);
            encoded = Base64.getEncoder().encodeToString(Hash);
        } catch (Exception e) {
            e.printStackTrace();
        }
        //System.out.println(encoded);
        return encoded;
    }

    private void pencet() {
        try {
            koneksi = koneksiDB.condb();
            ps = koneksi.prepareStatement(
                    "SELECT DATE_FORMAT(rp.tgl_registrasi,\"%d-%m-%Y\") AS tgl, ps.no_ktp, ps.nm_pasien, CONCAT(ps.alamat, \" - \", kc.nm_kec) AS alamat, kc.nm_kec,kl.nm_kel, \n"
                    + "REPLACE(REPLACE(REPLACE(kb.nm_kab, \"KABUPATEN\",\"\"),\"-\",\"\"),\" \",\"\") AS kab, pr.nm_prop, \n"
                    + "COALESCE(dp.kd_penyakit,\"-\") AS icdx, rp.stts_daftar, rp.status_poli \n"
                    + "FROM reg_periksa rp \n"
                    + "JOIN pasien ps ON ps.no_rkm_medis = rp.no_rkm_medis\n"
                    + "JOIN kelurahan kl ON kl.kd_kel = ps.kd_kel\n"        
                    + "JOIN kecamatan kc ON kc.kd_kec = ps.kd_kec\n"
                    + "JOIN kabupaten kb ON kb.kd_kab = ps.kd_kab\n"
                    + "JOIN propinsi pr ON pr.kd_prop = ps.kd_prop\n"
                    + "LEFT JOIN diagnosa_pasien dp ON dp.no_rawat = rp.no_rawat\n"
                    + "WHERE rp.tgl_registrasi = DATE_SUB(CURDATE(), INTERVAL 1 DAY)\n"
                    + "and rp.status_lanjut = \"Ralan\" and ps.no_ktp != \"-\" AND dp.kd_penyakit !=\"\" \n"
                    + "GROUP BY ps.no_ktp, dp.kd_penyakit");

            try {
                rs = ps.executeQuery();
                while (rs.next()) {
                    try {
                        headers = new HttpHeaders();
                        headers.setContentType(MediaType.APPLICATION_JSON);
                        utc = String.valueOf(api.GetUTCdatetimeAsString());
                        header1 = "{\"user\":\"3504073\",\"pass\":\"3504073\"}";
                        payload = "{\"user_id\":\"00404\",\"tStamp\":\"" + utc + "\"}";
                        base64UrlHeader = Base64.getEncoder().encodeToString(header1.getBytes()).replace("=", "").replace("+", "-").replace("/", "_");
                        base64UrlPayload = Base64.getEncoder().encodeToString(payload.getBytes()).replace("=", "").replace("+", "-").replace("/", "_");
                        // has_hmac
                        signature = generateSignature(base64UrlHeader, base64UrlPayload).replace("=", "").replace("+", "-").replace("/", "_");
                        //base64UrlSignature  = Base64.getEncoder().encodeToString(signature.getBytes()).replace("=", "");
                        //final token
                        tokensikesta = base64UrlHeader + "." + base64UrlPayload + "." + signature;

                        headers.add("x-username", "3504073");
                        headers.add("x-password", "3504073");
                        headers.add("x-token", tokensikesta);                

                        requestJson = "{"
                                + "\"tanggal\":\"" + rs.getString("tgl") + "\","
                                + "\"nik\":\"" + rs.getString("no_ktp") + "\","
                                + "\"nama\":\"" + rs.getString("nm_pasien") + "\","
                                + "\"alamat\":\"" + rs.getString("alamat") + "\","
                                + "\"desa\":\"" + rs.getString("nm_kel") + "\","
                                + "\"kecamatan\":\"" + rs.getString("nm_kec") + "\","
                                + "\"kabupaten\":\"" + rs.getString("kab") + "\","
                                + "\"propinsi\":\"" + rs.getString("nm_prop") + "\","
                                + "\"icdx\":\"" + rs.getString("icdx") + "\","
                                + "\"kunjungan\":\"" + rs.getString("stts_daftar") + "\","
                                + "\"kasus\":\"" + rs.getString("status_poli") + "\""
                                + "}";

                        requestEntity = new HttpEntity(requestJson, headers);
                        URL = "https://portal.dinkestulungagung.net/service/index.php?var=/kirim";

                        root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                        nameNode = root.path("pesan");
                        System.out.println(rs.getString("no_ktp")+"#"+nameNode.asText());
                        TeksArea.append(rs.getString("tgl")+" "+rs.getString("nm_pasien")+" "+nameNode.asText()+"\n");
                    } catch (Exception e) {
                        TeksArea.append("Gagal Kirim");
                    }
                }

            } catch (Exception e) {
                System.out.println("khanzahmsservicemobilejkn.frmUtama3.pencet()");
            }

        } catch (Exception e) {
            System.out.println("khanzahmsservicemobilejkn.frmUtama3.pencet()");
        }

    }

}
