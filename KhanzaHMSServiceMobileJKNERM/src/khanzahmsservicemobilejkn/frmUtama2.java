/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package khanzahmsservicemobilejkn;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import fungsi.ApiMobileJKN;
import fungsi.koneksiDB;
import fungsi.sekuel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.Timer;
import org.apache.commons.lang.StringUtils;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;

/**
 *
 * @author IT 2
 */
public class frmUtama2 extends javax.swing.JFrame {

    private Connection koneksi = koneksiDB.condb();
    private sekuel Sequel = new sekuel();
    private String requestJson, URL = "", utc = "", link = "", datajam = "", datasoap = "",
            nol_jam = "", nol_menit = "", nol_detik = "", jam = "", menit = "", detik = "", hari = "", noresep = "", jensiracikan = "",
            kodepoli = "", kodedokter = "", kodebpjs = Sequel.cariIsi("select password_asuransi.kd_pj from password_asuransi");
    private ApiMobileJKN api = new ApiMobileJKN();
    private HttpHeaders headers;
    private HttpEntity requestEntity;
    private ObjectMapper mapper = new ObjectMapper();
    private JsonNode root;
    private JsonNode nameNode;
    private PreparedStatement ps, ps2;
    private ResultSet rs, rs2;
    private Calendar cal = Calendar.getInstance();
    private int day = cal.get(Calendar.DAY_OF_WEEK);
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private SimpleDateFormat tanggalFormat = new SimpleDateFormat("yyyy-MM-dd");
    private Date parsedDate;
    private Date date = new Date();
    private int rn4 = 0, rn5 = 0, rn6 = 0, rn7 = 0;

    /**
     * Creates new form frmUtama2
     */
    public frmUtama2() {
        initComponents();
        try {
            link = koneksiDB.URLAPIMOBILEJKN();
        } catch (Exception e) {
            System.out.println("E : " + e);
        }

        this.setSize(610, 540);

        date = new Date();
        Tanggal1B.setText(tanggalFormat.format(date));
        //Tanggal2B.setText(tanggalFormat.format(date));
        //jam();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jButton2 = new javax.swing.JButton();
        Tanggal1B = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TeksArea2 = new javax.swing.JTextArea();
        no_rwt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TeksArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TeksArea = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();

        jPasswordField1.setText("jPasswordField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("Keluar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Tanggal1B.setPreferredSize(new java.awt.Dimension(100, 23));

        jLabel1.setText("Upload Manual Service Mobile JKN ERM");

        TeksArea2.setColumns(20);
        TeksArea2.setRows(5);
        jScrollPane1.setViewportView(TeksArea2);

        no_rwt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                no_rwtActionPerformed(evt);
            }
        });

        jLabel2.setText("No. Rawat :");

        jButton1.setText("Kirim");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        TeksArea1.setColumns(20);
        TeksArea1.setRows(5);
        jScrollPane2.setViewportView(TeksArea1);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Hari :");

        jLabel4.setText("Tanggal :");

        TeksArea.setColumns(20);
        TeksArea.setRows(5);
        jScrollPane3.setViewportView(TeksArea);

        jButton3.setText("CLear text");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Tanggal1B, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(no_rwt))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton2))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane2))))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(no_rwt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(Tanggal1B, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void no_rwtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_no_rwtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_no_rwtActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jam();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextField1.setText("");
        TeksArea.setText("");
        TeksArea1.setText("");
        TeksArea2.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmUtama2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmUtama2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmUtama2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmUtama2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUtama2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Tanggal1B;
    private javax.swing.JTextArea TeksArea;
    private javax.swing.JTextArea TeksArea1;
    private javax.swing.JTextArea TeksArea2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField no_rwt;
    // End of variables declaration//GEN-END:variables
    private void jam() {

        try {

            hari = jTextField1.getText();
            koneksi = koneksiDB.condb();

            TeksArea.append("Menjalankan WS tambah antrian Mobile JKN Pasien BPJS\n");

            //pasien JKN DENGAN MOBILE JKN
            ps = koneksi.prepareStatement(
                    "SELECT referensi_mobilejkn_bpjs.nobooking,referensi_mobilejkn_bpjs.no_rawat,reg_periksa.no_rkm_medis,pasien.nm_pasien,referensi_mobilejkn_bpjs.nohp,referensi_mobilejkn_bpjs.nomorkartu,"
                    + "referensi_mobilejkn_bpjs.nik,referensi_mobilejkn_bpjs.tanggalperiksa,poliklinik.nm_poli,dokter.nm_dokter,referensi_mobilejkn_bpjs.jampraktek,"
                    + "referensi_mobilejkn_bpjs.jeniskunjungan,referensi_mobilejkn_bpjs.nomorreferensi,referensi_mobilejkn_bpjs.status,referensi_mobilejkn_bpjs.validasi,"
                    + "referensi_mobilejkn_bpjs.kodepoli,referensi_mobilejkn_bpjs.pasienbaru,referensi_mobilejkn_bpjs.kodedokter,referensi_mobilejkn_bpjs.jampraktek,"
                    + "referensi_mobilejkn_bpjs.nomorantrean,referensi_mobilejkn_bpjs.angkaantrean,referensi_mobilejkn_bpjs.estimasidilayani,referensi_mobilejkn_bpjs.sisakuotajkn,"
                    + "referensi_mobilejkn_bpjs.kuotajkn,referensi_mobilejkn_bpjs.sisakuotanonjkn,referensi_mobilejkn_bpjs.kuotanonjkn "
                    + "FROM referensi_mobilejkn_bpjs INNER JOIN reg_periksa ON referensi_mobilejkn_bpjs.no_rawat=reg_periksa.no_rawat "
                    + "INNER JOIN pasien ON reg_periksa.no_rkm_medis=pasien.no_rkm_medis "
                    + "INNER JOIN poliklinik ON reg_periksa.kd_poli=poliklinik.kd_poli "
                    + "INNER JOIN dokter ON reg_periksa.kd_dokter=dokter.kd_dokter "
                    + "WHERE referensi_mobilejkn_bpjs.no_rawat = '" + no_rwt.getText() + "'"
                    + "order by referensi_mobilejkn_bpjs.tanggalperiksa");
            try {
                rs = ps.executeQuery();
                while (rs.next()) {
                    System.out.println("dapat 1");
                    try {
                        headers = new HttpHeaders();
                        headers.setContentType(MediaType.APPLICATION_JSON);
                        headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                        utc = String.valueOf(api.GetUTCdatetimeAsString());
                        headers.add("x-timestamp", utc);
                        headers.add("x-signature", api.getHmac(utc));
                        headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                        requestJson = "{"
                                + "\"kodebooking\": \"" + rs.getString("nobooking") + "\","
                                + "\"jenispasien\": \"JKN\","
                                + "\"nomorkartu\": \"" + rs.getString("nomorkartu") + "\","
                                + "\"nik\": \"" + rs.getString("nik") + "\","
                                + "\"nohp\": \"" + rs.getString("nohp") + "\","
                                + "\"kodepoli\": \"" + rs.getString("kodepoli") + "\","
                                + "\"namapoli\": \"" + rs.getString("nm_poli") + "\","
                                + "\"pasienbaru\": " + rs.getString("pasienbaru") + ","
                                + "\"norm\": \"" + rs.getString("no_rkm_medis") + "\","
                                + "\"tanggalperiksa\": \"" + rs.getString("tanggalperiksa") + "\","
                                + "\"kodedokter\": " + rs.getString("kodedokter") + ","
                                + "\"namadokter\": \"" + rs.getString("nm_dokter") + "\","
                                + "\"jampraktek\": \"" + rs.getString("jampraktek") + "\","
                                + "\"jeniskunjungan\": " + rs.getString("jeniskunjungan").substring(0, 1) + ","
                                + "\"nomorreferensi\": \"" + rs.getString("nomorreferensi") + "\","
                                + "\"nomorantrean\": \"" + rs.getString("nomorantrean") + "\","
                                + "\"angkaantrean\": " + Integer.parseInt(rs.getString("angkaantrean")) + ","
                                + "\"estimasidilayani\": " + rs.getString("estimasidilayani") + ","
                                + "\"sisakuotajkn\": " + rs.getString("sisakuotajkn") + ","
                                + "\"kuotajkn\": " + rs.getString("kuotajkn") + ","
                                + "\"sisakuotanonjkn\": " + rs.getString("sisakuotanonjkn") + ","
                                + "\"kuotanonjkn\": " + rs.getString("kuotanonjkn") + ","
                                + "\"keterangan\": \"Peserta harap 30 menit lebih awal guna pencatatan administrasi.\""
                                + "}";
                        TeksArea.append("JSON : " + requestJson + "\n");
                        TeksArea1.append("Berhasil Get Norawat=>");
                        requestEntity = new HttpEntity(requestJson, headers);
                        URL = link + "/antrean/add";
                        System.out.println("URL : " + URL);
                        //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                        root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                        nameNode = root.path("metadata");
                        if (nameNode.path("code").asText().equals("200") || nameNode.path("code").asText().equals("208") || nameNode.path("message").asText().equals("Ok")) {
                            Sequel.queryu2("update referensi_mobilejkn_bpjs set statuskirim='Sudah' where nobooking='" + rs.getString("nobooking") + "'");
                        }
                        TeksArea2.append("respon WS BPJS daftar : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                    } catch (Exception ex) {
                        System.out.println("Notifikasi Bridging : " + ex);
                    }
                }
            } catch (Exception ex) {
                System.out.println("Notif Ketersediaan : " + ex);
            } finally {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
            }

            TeksArea.append("Menjalankan WS batal antrian Mobile JKN Pasien BPJS\n");
            ps = koneksi.prepareStatement("SELECT * FROM referensi_mobilejkn_bpjs_batal where referensi_mobilejkn_bpjs_batal.statuskirim='Belum' and referensi_mobilejkn_bpjs_batal.tanggalbatal between " + (Tanggal1B.getText().equals(Tanggal1B.getText()) ? "SUBDATE('" + Tanggal1B.getText() + "',INTERVAL 6 DAY) and '" + Tanggal1B.getText() + "'" : "'" + Tanggal1B.getText() + "' and '" + Tanggal1B.getText() + "'"));
            try {
                rs = ps.executeQuery();
                while (rs.next()) {
                    try {
                        headers = new HttpHeaders();
                        headers.setContentType(MediaType.APPLICATION_JSON);
                        headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                        utc = String.valueOf(api.GetUTCdatetimeAsString());
                        headers.add("x-timestamp", utc);
                        headers.add("x-signature", api.getHmac(utc));
                        headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                        requestJson = "{"
                                + "\"kodebooking\": \"" + rs.getString("nobooking") + "\","
                                + "\"keterangan\": \"" + rs.getString("keterangan") + "\""
                                + "}";
                        TeksArea.append("JSON : " + requestJson + "\n");
                        requestEntity = new HttpEntity(requestJson, headers);
                        URL = link + "/antrean/batal";
                        System.out.println("URL : " + URL);
                        //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                        root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                        nameNode = root.path("metadata");
                        if (nameNode.path("code").asText().equals("200")) {
                            Sequel.queryu2("update referensi_mobilejkn_bpjs_batal set statuskirim='Sudah' where nomorreferensi='" + rs.getString("nomorreferensi") + "'");
                            datajam = rs.getString("tanggalbatal");
                            if (!datajam.equals("")) {
                                if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "99", datajam}) == true) {
                                    parsedDate = dateFormat.parse(datajam);
                                    try {
                                        TeksArea.append("Menjalankan WS taskid batal pelayanan poli Mobile JKN Pasien BPJS\n");
                                        headers = new HttpHeaders();
                                        headers.setContentType(MediaType.APPLICATION_JSON);
                                        headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                        utc = String.valueOf(api.GetUTCdatetimeAsString());
                                        headers.add("x-timestamp", utc);
                                        headers.add("x-signature", api.getHmac(utc));
                                        headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                        requestJson = "{"
                                                + "\"kodebooking\": \"" + rs.getString("nobooking") + "\","
                                                + "\"taskid\": \"99\","
                                                + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                + "}";
                                        TeksArea.append("JSON : " + requestJson + "\n");
                                        requestEntity = new HttpEntity(requestJson, headers);
                                        URL = link + "/antrean/updatewaktu";
                                        System.out.println("URL : " + URL);
                                        //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                        root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                        nameNode = root.path("metadata");
                                        if (!nameNode.path("code").asText().equals("200")) {
                                            Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='99' and no_rawat='" + rs.getString("no_rawat") + "'");
                                        }
                                        TeksArea2.append("respon WS BPJS 99 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                    } catch (Exception ex) {
                                        System.out.println("Notifikasi Bridging : " + ex);
                                    }
                                }
                            }
                        }
                        TeksArea2.append("respon WS BPJS : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                    } catch (Exception ex) {
                        System.out.println("Notifikasi Bridging : " + ex);
                    }
                }
            } catch (Exception ex) {
                System.out.println("Notif Ketersediaan : " + ex);
            } finally {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
            }

            ps = koneksi.prepareStatement(
                    "SELECT referensi_mobilejkn_bpjs.nobooking,referensi_mobilejkn_bpjs.no_rawat,reg_periksa.no_rkm_medis,pasien.nm_pasien,referensi_mobilejkn_bpjs.nohp,referensi_mobilejkn_bpjs.nomorkartu,"
                    + "referensi_mobilejkn_bpjs.nik,referensi_mobilejkn_bpjs.tanggalperiksa,poliklinik.nm_poli,dokter.nm_dokter,referensi_mobilejkn_bpjs.jampraktek,"
                    + "referensi_mobilejkn_bpjs.jeniskunjungan,referensi_mobilejkn_bpjs.nomorreferensi,referensi_mobilejkn_bpjs.status,referensi_mobilejkn_bpjs.validasi,"
                    + "referensi_mobilejkn_bpjs.kodepoli,referensi_mobilejkn_bpjs.pasienbaru,referensi_mobilejkn_bpjs.kodedokter,referensi_mobilejkn_bpjs.jampraktek,"
                    + "referensi_mobilejkn_bpjs.nomorantrean,referensi_mobilejkn_bpjs.angkaantrean,referensi_mobilejkn_bpjs.estimasidilayani,referensi_mobilejkn_bpjs.sisakuotajkn,"
                    + "referensi_mobilejkn_bpjs.kuotajkn,referensi_mobilejkn_bpjs.sisakuotanonjkn,referensi_mobilejkn_bpjs.kuotanonjkn "
                    + "FROM referensi_mobilejkn_bpjs INNER JOIN reg_periksa ON referensi_mobilejkn_bpjs.no_rawat=reg_periksa.no_rawat "
                    + "INNER JOIN pasien ON reg_periksa.no_rkm_medis=pasien.no_rkm_medis "
                    + "INNER JOIN poliklinik ON reg_periksa.kd_poli=poliklinik.kd_poli "
                    + "INNER JOIN dokter ON reg_periksa.kd_dokter=dokter.kd_dokter "
                    + "WHERE referensi_mobilejkn_bpjs.statuskirim='Sudah' and referensi_mobilejkn_bpjs.no_rawat = '" + no_rwt.getText() + "' "
                    + "order by referensi_mobilejkn_bpjs.tanggalperiksa");
            try {
                rs = ps.executeQuery();
                while (rs.next()) {
                    TeksArea1.append("Sudah Daftar=>");
                    //taskid 3 jkn
                    datajam = Sequel.cariIsi("select referensi_mobilejkn_bpjs.validasi from referensi_mobilejkn_bpjs where referensi_mobilejkn_bpjs.no_rawat=?", rs.getString("no_rawat"));

                    if (!datajam.equals("")) {
                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "3", datajam}) == true) {
                            parsedDate = dateFormat.parse(datajam);
                            try {
                                System.out.println("jalan " + datajam);
                                TeksArea.append("Menjalankan WS taskid mulai tunggu poli Mobile JKN Pasien BPJS\n");
                                headers = new HttpHeaders();
                                headers.setContentType(MediaType.APPLICATION_JSON);
                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                headers.add("x-timestamp", utc);
                                headers.add("x-signature", api.getHmac(utc));
                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                requestJson = "{"
                                        + "\"kodebooking\": \"" + rs.getString("nobooking") + "\","
                                        + "\"taskid\": \"3\","
                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                        + "}";
                                TeksArea.append("JSON : " + requestJson + "\n");
                                requestEntity = new HttpEntity(requestJson, headers);
                                URL = link + "/antrean/updatewaktu";
                                System.out.println("URL : " + URL);
                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                nameNode = root.path("metadata");
                                if (!nameNode.path("code").asText().equals("200")) {
                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='3' and no_rawat='" + rs.getString("no_rawat") + "'");
                                }
                                TeksArea2.append("respon WS BPJS 3 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                            } catch (Exception ex) {
                                System.out.println("Notifikasi Bridging : " + ex);
                            }
                        }
                    }

                    //taskid 4 jkn
                    datajam = Sequel.cariIsi("select concat(pemeriksaan_ralan.tgl_perawatan,' ',pemeriksaan_ralan.jam_rawat) from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat=?", rs.getString("no_rawat"));
                    if (!datajam.equals("")) {
                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "4", datajam}) == true) {
                            parsedDate = dateFormat.parse(datajam);
                            try {
                                TeksArea.append("Menjalankan WS taskid mulai pelayanan poli Mobile JKN Pasien BPJS\n");
                                headers = new HttpHeaders();
                                headers.setContentType(MediaType.APPLICATION_JSON);
                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                headers.add("x-timestamp", utc);
                                headers.add("x-signature", api.getHmac(utc));
                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                requestJson = "{"
                                        + "\"kodebooking\": \"" + rs.getString("nobooking") + "\","
                                        + "\"taskid\": \"4\","
                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                        + "}";
                                TeksArea.append("JSON : " + requestJson + "\n");
                                requestEntity = new HttpEntity(requestJson, headers);
                                URL = link + "/antrean/updatewaktu";
                                System.out.println("URL : " + URL);
                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                nameNode = root.path("metadata");
                                if (!nameNode.path("code").asText().equals("200")) {
                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='4' and no_rawat='" + rs.getString("no_rawat") + "'");
                                }
                                TeksArea2.append("respon WS BPJS 4 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                            } catch (Exception ex) {
                                System.out.println("Notifikasi Bridging : " + ex);
                            }
                        }
                    }

                    //taskid 5 jkn
                    //datajam = Sequel.cariIsi("select now() from reg_periksa where reg_periksa.stts='Sudah' and reg_periksa.no_rawat=?", rs.getString("no_rawat"));
                    datajam = Sequel.cariIsi("select DATE_ADD(concat(pemeriksaan_ralan.tgl_perawatan,' ',pemeriksaan_ralan.jam_rawat),interval 1 minute) from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat=?", rs.getString("no_rawat"));
                    if (!datajam.equals("")) {
                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "5", datajam}) == true) {
                            parsedDate = dateFormat.parse(datajam);
                            try {
                                TeksArea.append("Menjalankan WS taskid selesai pelayanan poli Mobile JKN Pasien BPJS\n");
                                headers = new HttpHeaders();
                                headers.setContentType(MediaType.APPLICATION_JSON);
                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                headers.add("x-timestamp", utc);
                                headers.add("x-signature", api.getHmac(utc));
                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                requestJson = "{"
                                        + "\"kodebooking\": \"" + rs.getString("nobooking") + "\","
                                        + "\"taskid\": \"5\","
                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                        + "}";
                                TeksArea.append("JSON : " + requestJson + "\n");
                                requestEntity = new HttpEntity(requestJson, headers);
                                URL = link + "/antrean/updatewaktu";
                                System.out.println("URL : " + URL);
                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                nameNode = root.path("metadata");
                                if (!nameNode.path("code").asText().equals("200")) {
                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='5' and no_rawat='" + rs.getString("no_rawat") + "'");
                                }
                                TeksArea2.append("respon WS BPJS 5 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                            } catch (Exception ex) {
                                System.out.println("Notifikasi Bridging : " + ex);
                            }
                        }
                    }

                    noresep = Sequel.cariIsi("select resep_obat.no_resep from resep_obat where resep_obat.no_rawat=?", rs.getString("no_rawat"));
                    if (!noresep.equals("")) {
                        try {
                            TeksArea.append("Menjalankan WS tambah antrian farmasi Mobile JKN Pasien BPJS\n");
                            headers = new HttpHeaders();
                            headers.setContentType(MediaType.APPLICATION_JSON);
                            headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                            utc = String.valueOf(api.GetUTCdatetimeAsString());
                            headers.add("x-timestamp", utc);
                            headers.add("x-signature", api.getHmac(utc));
                            headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                            requestJson = "{"
                                    + "\"kodebooking\": \"" + rs.getString("nobooking") + "\","
                                    + "\"jenisresep\": \"" + (Sequel.cariInteger("select count(resep_dokter_racikan.no_resep) from resep_dokter_racikan where resep_dokter_racikan.no_resep=?", noresep) > 0 ? "Racikan" : "Non Racikan") + "\","
                                    + "\"nomorantrean\": " + Integer.parseInt(StringUtils.right(noresep, 4)) + ","
                                    + "\"keterangan\": \"Resep dibuat secara elektronik di poli\""
                                    + "}";
                            TeksArea.append("JSON : " + requestJson + "\n");
                            requestEntity = new HttpEntity(requestJson, headers);
                            URL = link + "/antrean/farmasi/add";
                            System.out.println("URL : " + URL);
                            //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                            root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                            nameNode = root.path("metadata");
                            TeksArea2.append("respon WS BPJS Resep : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                        } catch (Exception ex) {
                            System.out.println("Notifikasi Bridging : " + ex);
                        }
                    }

                    datajam = Sequel.cariIsi("select concat(resep_obat.tgl_perawatan,' ',resep_obat.jam) from resep_obat where resep_obat.tgl_perawatan<>'0000-00-00' and resep_obat.status='ralan' and resep_obat.no_rawat=?", rs.getString("no_rawat"));
                    if (!datajam.equals("")) {
                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "6", datajam}) == true) {
                            parsedDate = dateFormat.parse(datajam);
                            try {
                                TeksArea.append("Menjalankan WS taskid permintaan resep poli Mobile JKN Pasien BPJS\n");
                                headers = new HttpHeaders();
                                headers.setContentType(MediaType.APPLICATION_JSON);
                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                headers.add("x-timestamp", utc);
                                headers.add("x-signature", api.getHmac(utc));
                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                requestJson = "{"
                                        + "\"kodebooking\": \"" + rs.getString("nobooking") + "\","
                                        + "\"taskid\": \"6\","
                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                        + "}";
                                TeksArea.append("JSON : " + requestJson + "\n");
                                requestEntity = new HttpEntity(requestJson, headers);
                                URL = link + "/antrean/updatewaktu";
                                System.out.println("URL : " + URL);
                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                nameNode = root.path("metadata");
                                if (!nameNode.path("code").asText().equals("200")) {
                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='6' and no_rawat='" + rs.getString("no_rawat") + "'");
                                }
                                TeksArea2.append("respon WS BPJS 6 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                            } catch (Exception ex) {
                                System.out.println("Notifikasi Bridging : " + ex);
                            }
                        }
                    }

                    datajam = Sequel.cariIsi("select concat(resep_obat.tgl_perawatan,' ',resep_obat.jam) from resep_obat where resep_obat.status='ralan' and resep_obat.no_rawat=? and concat(resep_obat.tgl_perawatan,' ',resep_obat.jam)<>'0000-00-00 00:00:00'", rs.getString("no_rawat"));
                    if (!datajam.equals("")) {
                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "7", datajam}) == true) {
                            parsedDate = dateFormat.parse(datajam);
                            try {
                                TeksArea.append("Menjalankan WS taskid validasi resep poli Mobile JKN Pasien BPJS\n");
                                headers = new HttpHeaders();
                                headers.setContentType(MediaType.APPLICATION_JSON);
                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                headers.add("x-timestamp", utc);
                                headers.add("x-signature", api.getHmac(utc));
                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                requestJson = "{"
                                        + "\"kodebooking\": \"" + rs.getString("nobooking") + "\","
                                        + "\"taskid\": \"7\","
                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                        + "}";
                                TeksArea.append("JSON : " + requestJson + "\n");
                                requestEntity = new HttpEntity(requestJson, headers);
                                URL = link + "/antrean/updatewaktu";
                                System.out.println("URL : " + URL);
                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                nameNode = root.path("metadata");
                                if (!nameNode.path("code").asText().equals("200")) {
                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='7' and no_rawat='" + rs.getString("no_rawat") + "'");
                                }
                                TeksArea2.append("respon WS BPJS 7 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                            } catch (Exception ex) {
                                System.out.println("Notifikasi Bridging : " + ex);
                            }
                        }
                    }

                    datajam = Sequel.cariIsi("select now() from reg_periksa where reg_periksa.stts='Batal' and reg_periksa.no_rawat=?", rs.getString("no_rawat"));
                    if (!datajam.equals("")) {
                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "99", datajam}) == true) {
                            parsedDate = dateFormat.parse(datajam);
                            try {
                                TeksArea.append("Menjalankan WS taskid batal pelayanan poli Mobile JKN Pasien BPJS\n");
                                headers = new HttpHeaders();
                                headers.setContentType(MediaType.APPLICATION_JSON);
                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                headers.add("x-timestamp", utc);
                                headers.add("x-signature", api.getHmac(utc));
                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                requestJson = "{"
                                        + "\"kodebooking\": \"" + rs.getString("nobooking") + "\","
                                        + "\"taskid\": \"99\","
                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                        + "}";
                                TeksArea.append("JSON : " + requestJson + "\n");
                                requestEntity = new HttpEntity(requestJson, headers);
                                URL = link + "/antrean/updatewaktu";
                                System.out.println("URL : " + URL);
                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                nameNode = root.path("metadata");
                                if (!nameNode.path("code").asText().equals("200")) {
                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='99' and no_rawat='" + rs.getString("no_rawat") + "'");
                                }
                                TeksArea2.append("respon WS BPJS 99 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                            } catch (Exception ex) {
                                System.out.println("Notifikasi Bridging : " + ex);
                            }
                        }
                    }
                }
            } catch (Exception ex) {
                System.out.println("Notif : " + ex);
            } finally {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
            }

            //=================================================================================================================//
            //pasien Non MOBILE JKN
            TeksArea.append("Menjalankan WS tambah antrian Mobile JKN Pasien Non BPJS\n");
            ps = koneksi.prepareStatement("select reg_periksa.no_reg,reg_periksa.no_rawat,reg_periksa.tgl_registrasi,reg_periksa.kd_dokter,dokter.nm_dokter,reg_periksa.kd_poli,poliklinik.nm_poli,reg_periksa.stts_daftar,reg_periksa.no_rkm_medis,reg_periksa.kd_pj "
                    + "from reg_periksa inner join dokter on reg_periksa.kd_dokter=dokter.kd_dokter inner join poliklinik on reg_periksa.kd_poli=poliklinik.kd_poli where reg_periksa.tgl_registrasi between '" + Tanggal1B.getText() + "' and '" + Tanggal1B.getText() + "' and reg_periksa.no_rawat= '" + no_rwt.getText() + "' "
                    + "and reg_periksa.no_rawat not in (select referensi_mobilejkn_bpjs.no_rawat from referensi_mobilejkn_bpjs where referensi_mobilejkn_bpjs.tanggalperiksa between '" + Tanggal1B.getText() + "' and '" + Tanggal1B.getText() + "') "
                    + "order by concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg)");
            try {
                rs = ps.executeQuery();
                while (rs.next()) {
                    TeksArea1.append(hari + "_" + rs.getString("no_rawat") + "_" + rs.getString("kd_dokter") + "_" + rs.getString("kd_poli"));
                    ps2 = koneksi.prepareStatement("select * from jadwal where jadwal.hari_kerja=? and jadwal.kd_dokter=? and jadwal.kd_poli=?");
                    try {
                        ps2.setString(1, hari);
                        ps2.setString(2, rs.getString("kd_dokter"));
                        ps2.setString(3, rs.getString("kd_poli"));
                        rs2 = ps2.executeQuery();
                        if (rs2.next()) {
                            TeksArea1.append("=>DOKTER DAN POLI DITEMUKAN");
                            kodedokter = Sequel.cariIsi("select maping_dokter_dpjpvclaim.kd_dokter_bpjs from maping_dokter_dpjpvclaim where maping_dokter_dpjpvclaim.kd_dokter=?", rs.getString("kd_dokter"));
                            kodepoli = Sequel.cariIsi("select maping_poli_bpjs.kd_poli_bpjs from maping_poli_bpjs where maping_poli_bpjs.kd_poli_rs=?", rs.getString("kd_poli"));
                            if ((!kodedokter.equals("")) && (!kodepoli.equals(""))) {
                                try {
                                    datajam = Sequel.cariIsi("select DATE_ADD(concat('" + rs.getString("tgl_registrasi") + "',' ','" + rs2.getString("jam_mulai") + "'),INTERVAL " + (Integer.parseInt(rs.getString("no_reg")) * 10) + " MINUTE) ");
                                    parsedDate = dateFormat.parse(datajam);
                                    if (rs.getString("kd_pj").equals(kodebpjs)) {
                                        headers = new HttpHeaders();
                                        headers.setContentType(MediaType.APPLICATION_JSON);
                                        headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                        utc = String.valueOf(api.GetUTCdatetimeAsString());
                                        headers.add("x-timestamp", utc);
                                        headers.add("x-signature", api.getHmac(utc));
                                        headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                        requestJson = "{"
                                                + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                + "\"jenispasien\": \"NON JKN\","
                                                + "\"nomorkartu\": \"-\","
                                                + "\"nik\": \"-\","
                                                + "\"nohp\": \"-\","
                                                + "\"kodepoli\": \"" + Sequel.cariIsi("select maping_poli_bpjs.kd_poli_bpjs from maping_poli_bpjs where maping_poli_bpjs.kd_poli_rs=?", rs.getString("kd_poli")) + "\","
                                                + "\"namapoli\": \"" + rs.getString("nm_poli") + "\","
                                                + "\"pasienbaru\": " + rs.getString("stts_daftar").replaceAll("Baru", "1").replaceAll("Lama", "0").replaceAll("-", "0") + ","
                                                + "\"norm\": \"" + rs.getString("no_rkm_medis") + "\","
                                                + "\"tanggalperiksa\": \"" + rs.getString("tgl_registrasi") + "\","
                                                + "\"kodedokter\": " + Sequel.cariIsi("select maping_dokter_dpjpvclaim.kd_dokter_bpjs from maping_dokter_dpjpvclaim where maping_dokter_dpjpvclaim.kd_dokter=?", rs.getString("kd_dokter")) + ","
                                                + "\"namadokter\": \"" + rs.getString("nm_dokter") + "\","
                                                + "\"jampraktek\": \"" + rs2.getString("jam_mulai").substring(0, 5) + "-" + rs2.getString("jam_selesai").substring(0, 5) + "\","
                                                + "\"jeniskunjungan\": 3,"
                                                + "\"nomorreferensi\": \"-\","
                                                + "\"nomorantrean\": \"" + rs.getString("no_reg") + "\","
                                                + "\"angkaantrean\": " + Integer.parseInt(rs.getString("no_reg")) + ","
                                                + "\"estimasidilayani\": " + parsedDate.getTime() + ","
                                                + "\"sisakuotajkn\": " + (rs2.getInt("kuota") - Integer.parseInt(rs.getString("no_reg"))) + ","
                                                + "\"kuotajkn\": " + rs2.getString("kuota") + ","
                                                + "\"sisakuotanonjkn\": " + (rs2.getInt("kuota") - Integer.parseInt(rs.getString("no_reg"))) + ","
                                                + "\"kuotanonjkn\": " + rs2.getString("kuota") + ","
                                                + "\"keterangan\": \"Peserta harap 30 menit lebih awal guna pencatatan administrasi.\""
                                                + "}";
                                        TeksArea.append("JSON : " + requestJson + "\n");
                                        requestEntity = new HttpEntity(requestJson, headers);
                                        URL = link + "/antrean/add";
                                        System.out.println("URL : " + URL);
                                        //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                        root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                        nameNode = root.path("metadata");
                                        TeksArea2.append("respon WS BPJS DAFTAR : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                        TeksArea1.append("=>JALANKAN DFATAR" + "\n");
                                    }
                                } catch (Exception ex) {
                                    System.out.println("Notifikasi Bridging  DAFTAR: " + ex);
                                }

                                //taskid 3
                                if (rs.getString("kd_pj").equals(kodebpjs)) {
                                    datajam = Sequel.cariIsi("select if(concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg)>concat('" + rs.getString("tgl_registrasi") + "',' ','" + rs2.getString("jam_mulai") + "'),concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg),concat('" + rs.getString("tgl_registrasi") + "',' ','" + rs2.getString("jam_mulai") + "')) as tanggal from reg_periksa where reg_periksa.no_rawat=?", rs.getString("no_rawat"));
                                    datasoap = Sequel.cariIsi("SELECT if(concat(pemeriksaan_ralan.tgl_perawatan,' ',pemeriksaan_ralan.jam_rawat) < concat(pemeriksaan_ralan.tgl_perawatan,' ', '" + rs2.getString("jam_mulai") + "'),\"True\",\"False\" ) AS hsl \n"
                                            + "from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat= '" + rs.getString("no_rawat") + "'");
                                    if (datasoap.equals("")) {
                                        datajam = "";
                                    }
                                    if (datasoap.equals("False")) {
                                        datajam = Sequel.cariIsi("select if(concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg)>concat('" + rs.getString("tgl_registrasi") + "',' ','" + rs2.getString("jam_mulai") + "'),concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg),concat('" + rs.getString("tgl_registrasi") + "',' ','" + rs2.getString("jam_mulai") + "')) as tanggal from reg_periksa where reg_periksa.no_rawat=?", rs.getString("no_rawat"));
                                    }
                                    if (datasoap.equals("True")) {
                                        datajam = Sequel.cariIsi("SELECT concat(pemeriksaan_ralan.tgl_perawatan,' ',DATE_ADD(pemeriksaan_ralan.jam_rawat,INTERVAL FLOOR(RAND()*(50-70)+70)*-1 MINUTE)) from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat='" + rs.getString("no_rawat") + "'");
                                    }
                                    if (!datasoap.equals("") && !datajam.equals("")) {
                                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "3", datajam}) == true) {
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid mulai tunggu poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"3\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (!nameNode.path("code").asText().equals("200")) {
                                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='3' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea2.append("respon WS BPJS 3  : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging 3 : " + ex);
                                            }
                                        }
                                    }
                                }

                                //taskid 4
                                if (rs.getString("kd_pj").equals(kodebpjs)) {
                                    datajam = Sequel.cariIsi("select concat(pemeriksaan_ralan.tgl_perawatan,' ',pemeriksaan_ralan.jam_rawat) from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat=?", rs.getString("no_rawat"));
                                    //if (datajam.equals("")) { 
                                    //    rn4 = (int)(Math.random()*(6-1+1)+1);
                                    //    datajam = Sequel.cariIsi("select DATE_ADD(concat('" + rs.getString("tgl_registrasi") + "',' ','" + rs2.getString("jam_mulai") + "'),INTERVAL " + (Integer.parseInt(rs.getString("no_reg")) * 10+rn4) + " MINUTE) ");
                                    //}
                                    if (!datajam.equals("")) {
                                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "4", datajam}) == true) {
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid mulai pelayanan poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"4\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (!nameNode.path("code").asText().equals("200")) {
                                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='4' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea2.append("respon WS BPJS 4 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging 4 : " + ex);
                                            }
                                        }
                                    }
                                }

                                //task id 5
                                if (rs.getString("kd_pj").equals(kodebpjs)) {
                                    //asli datajam = Sequel.cariIsi("select now() from reg_periksa where reg_periksa.stts='Sudah' and reg_periksa.no_rawat=?", rs.getString("no_rawat"));
                                    //if (datajam.equals("")) {
                                    //    rn5 = (int)(Math.random()*(11-5+1)+5);
                                    //    datajam = Sequel.cariIsi("select DATE_ADD(concat('" + rs.getString("tgl_registrasi") + "',' ','" + rs2.getString("jam_mulai") + "'),INTERVAL " + (Integer.parseInt(rs.getString("no_reg")) * 10+rn5) + " MINUTE) ");
                                    //}
                                    datajam = Sequel.cariIsi("select DATE_ADD(concat(pemeriksaan_ralan.tgl_perawatan,' ',pemeriksaan_ralan.jam_rawat),interval 1 minute) from pemeriksaan_ralan where pemeriksaan_ralan.no_rawat=?", rs.getString("no_rawat"));
                                    if (!datajam.equals("")) {
                                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "5", datajam}) == true) {
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid selesai pelayanan poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"5\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (!nameNode.path("code").asText().equals("200")) {
                                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='5' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea2.append("respon WS BPJS 5 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging 5: " + ex);
                                            }
                                        }
                                    }
                                }

                                //taskid jns resep
                                if (rs.getString("kd_pj").equals(kodebpjs)) {
                                    noresep = Sequel.cariIsi("select resep_obat.no_resep from resep_obat where resep_obat.no_rawat=?", rs.getString("no_rawat"));
                                    if (!noresep.equals("")) {
                                        try {
                                            TeksArea.append("Menjalankan WS tambah antrian farmasi Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                            headers = new HttpHeaders();
                                            headers.setContentType(MediaType.APPLICATION_JSON);
                                            headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                            utc = String.valueOf(api.GetUTCdatetimeAsString());
                                            headers.add("x-timestamp", utc);
                                            headers.add("x-signature", api.getHmac(utc));
                                            headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                            requestJson = "{"
                                                    + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                    + "\"jenisresep\": \"" + (Sequel.cariInteger("select count(resep_dokter_racikan.no_resep) from resep_dokter_racikan where resep_dokter_racikan.no_resep=?", noresep) > 0 ? "Racikan" : "Non Racikan") + "\","
                                                    + "\"nomorantrean\": " + Integer.parseInt(StringUtils.right(noresep, 4)) + ","
                                                    + "\"keterangan\": \"Resep dibuat secara elektronik di poli\""
                                                    + "}";
                                            TeksArea.append("JSON : " + requestJson + "\n");
                                            requestEntity = new HttpEntity(requestJson, headers);
                                            URL = link + "/antrean/farmasi/add";
                                            System.out.println("URL : " + URL);
                                            //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                            root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                            nameNode = root.path("metadata");
                                            TeksArea2.append("respon WS BPJS Antri far : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                        } catch (Exception ex) {
                                            System.out.println("Notifikasi Bridging Antri far: " + ex);
                                        }
                                    }
                                }

                                //tskid 6
                                if (rs.getString("kd_pj").equals(kodebpjs)) {
                                    datajam = Sequel.cariIsi("select concat(resep_obat.tgl_perawatan,' ',resep_obat.jam) from resep_obat where resep_obat.tgl_perawatan<>'0000-00-00' and resep_obat.status='ralan' and resep_obat.no_rawat=?", rs.getString("no_rawat"));
                                    //if (datajam.equals("")) {
                                    //    rn6 = (int)(Math.random()*(16-10+1)+10);
                                    //    datajam = Sequel.cariIsi("select DATE_ADD(concat('" + rs.getString("tgl_registrasi") + "',' ','" + rs2.getString("jam_mulai") + "'),INTERVAL " + (Integer.parseInt(rs.getString("no_reg")) * 10+rn6) + " MINUTE) ");
                                    //}
                                    if (!datajam.equals("")) {
                                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "6", datajam}) == true) {
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid permintaan resep poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"6\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (!nameNode.path("code").asText().equals("200")) {
                                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='6' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea2.append("respon WS BPJS 6 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging 6 : " + ex);
                                            }
                                        }
                                    }
                                }

                                //taskid 7
                                if (rs.getString("kd_pj").equals(kodebpjs)) {
                                    datajam = Sequel.cariIsi("select concat(resep_obat.tgl_perawatan,' ',resep_obat.jam) from resep_obat where resep_obat.status='ralan' and resep_obat.no_rawat=? and concat(resep_obat.tgl_perawatan,' ',resep_obat.jam)<>'0000-00-00 00:00:00'", rs.getString("no_rawat"));
                                    //if (datajam.equals("")) {
                                    //    rn7 = (int)(Math.random()*(21-15+1)+15);
                                    //    datajam = Sequel.cariIsi("select DATE_ADD(concat('" + rs.getString("tgl_registrasi") + "',' ','" + rs2.getString("jam_mulai") + "'),INTERVAL " + (Integer.parseInt(rs.getString("no_reg")) * 10+rn7) + " MINUTE) ");
                                    //}
                                    if (!datajam.equals("")) {
                                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "7", datajam}) == true) {
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid validasi resep poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"7\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (!nameNode.path("code").asText().equals("200")) {
                                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='7' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea2.append("respon WS BPJS 7 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging 7: " + ex);
                                            }
                                        }
                                    }
                                }

                                //taskid batal 99
                                if (rs.getString("kd_pj").equals(kodebpjs)) {
                                    datajam = Sequel.cariIsi("select now() from reg_periksa where reg_periksa.stts='Batal' and reg_periksa.no_rawat=?", rs.getString("no_rawat"));
                                    if (!datajam.equals("")) {
                                        if (Sequel.menyimpantf2("referensi_mobilejkn_bpjs_taskid", "?,?,?", "task id", 3, new String[]{rs.getString("no_rawat"), "99", datajam}) == true) {
                                            parsedDate = dateFormat.parse(datajam);
                                            try {
                                                TeksArea.append("Menjalankan WS taskid batal pelayanan poli Mobile JKN Pasien Non BPJS/BPS Onsite\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                requestJson = "{"
                                                        + "\"kodebooking\": \"" + rs.getString("no_rawat") + "\","
                                                        + "\"taskid\": \"99\","
                                                        + "\"waktu\": \"" + parsedDate.getTime() + "\""
                                                        + "}";
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                URL = link + "/antrean/updatewaktu";
                                                System.out.println("URL : " + URL);
                                                //System.out.println(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                root = mapper.readTree(api.getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody());
                                                nameNode = root.path("metadata");
                                                if (!nameNode.path("code").asText().equals("200")) {
                                                    Sequel.queryu2("delete from referensi_mobilejkn_bpjs_taskid where taskid='99' and no_rawat='" + rs.getString("no_rawat") + "'");
                                                }
                                                TeksArea2.append("respon WS BPJS 99 : " + nameNode.path("code").asText() + " " + nameNode.path("message").asText() + "\n");
                                            } catch (Exception ex) {
                                                System.out.println("Notifikasi Bridging BATAL: " + ex);
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    } catch (Exception ex) {
                        System.out.println("Notif : " + ex);
                    } finally {
                        if (rs2 != null) {
                            rs2.close();
                        }
                        if (ps2 != null) {
                            ps2.close();
                        }
                    }
                }
            } catch (Exception ex) {
                System.out.println("Notif Ketersediaan : " + ex);
            } finally {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
            }

            TeksArea.append("Proses update selesai\n");
        } catch (Exception ez) {
            System.out.println("Notif : " + ez);
        }
    }

}
